#!/bin/bash

# --- HORUS UNIFIED CLI WRAPPER ---

# Encontra o diretÃ³rio onde o script estÃ¡ localizado
BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
COMMAND=$1

# Garante que estamos no diretÃ³rio correto
cd "$BASE_DIR"

# FunÃ§Ã£o para iniciar e observar o ambiente de desenvolvimento
start_dev_environment() {
    echo "ðŸš€ A iniciar o ambiente Docker e o servidor Horus Nexus..."
    docker compose up -d --build
    
    # Inicia os logs em segundo plano
    docker compose logs -f app &
    LOGS_PID=$!
    
    echo "--- Horus em modo de desenvolvimento. Pressione Ctrl+C para parar. ---"

    cleanup() {
        echo -e "\nðŸ›‘ A parar e a remover os contentores Docker..."
        kill $LOGS_PID
        docker compose down
        exit 0
    }
    trap cleanup SIGINT
    
    # Loop de observaÃ§Ã£o de ficheiros para hot-reloading
    while true; do
        find ./App ./Core ./Routes ./Includes -mmin -1 -name "*.php" -print | \
        while read -r file; do
             echo "âœ¨ Ficheiro alterado: $file. A reiniciar o servidor..."
             docker compose restart app
             sleep 5 
        done
        sleep 2
    done
}

# --- LÃ“GICA DE ROTEAMENTO DE COMANDOS ---
if [[ "$COMMAND" == "Nexus" || "$COMMAND" == "nexus" ]]; then
    start_dev_environment
else
    # CORREÃ‡ÃƒO: Executa o comando usando o novo script 'console' do PHP
    echo " Mapeando o comando para o contentor Docker..."
    docker compose exec app php Console "$@"
fi